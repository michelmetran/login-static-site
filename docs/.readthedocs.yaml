# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Optionally build your docs in additional formats such as PDF and ePub
formats:
    - pdf
    - epub

# Set the OS, Python version, and other tools you might need
build:
    os: ubuntu-24.04
    tools:
        python: "3.11"
        golang: "1.22"

    # https://browniebroke.com/blog/2022-11-21-specify-docs-dependency-groups-with-poetry-and-read-the-docs/
    # https://docs.readthedocs.com/platform/stable/config-file/v2.html#build-jobs
    # Possible problems Some users may require to pass some additional flags or install from a ppa.
    jobs:
        pre_create_environment:
            # Python
            - echo "Command run at 'pre_create_environment' step"
            - asdf plugin add uv
            - asdf install uv latest
            - asdf global uv latest

            # Go
            - asdf plugin add golang
            - asdf install golang latest
            - asdf global golang latest

        create_environment:
            - uv venv "${READTHEDOCS_VIRTUALENV_PATH}"

        post_create_environment:
            # Install Poetry
            #- pip install poetry
            #- python -m pip install poetry
            #- echo `date`

            # Tell Poetry to not use a virtual environment
            #- poetry config virtualenvs.create false
            #- echo "Command run at 'pre_create_environment' step"
            #- poetry install --with docs
            - echo "Instalando oauth2-proxy..."

            # 1. Configura GOPATH no ambiente de build
            # O HOME no RTD é o /home/docs. O GOPATH padrão é $HOME/go.
            #- export GOPATH=$HOME/go
            #- cd /usr/local/go && ls -la
            - go version

            # 2. Adiciona o diretório dos binários do Go ao PATH
            #- export PATH=$PATH:$GOPATH/bin

            # Verifique se o binário está disponível para depuração
            - which go

            # 3. Instala o oauth2-proxy. Agora o 'go' deve estar no PATH.
            - go install github.com/oauth2-proxy/oauth2-proxy/v7@latest

            # O Read the Docs cria o $GOPATH em /home/docs/go
            #- echo $GOPATH
            #- echo $GOROOT
            #- cd /usr/local/go && ls -la
            # - go version
            - export PATH=$PATH:/home/docs/.asdf/shims/go

            # 4. Verifica se o binário foi instalado corretamente
            #- echo "Verificando se oauth2-proxy está no PATH:"
            - echo $PATH
            - docker run quay.io/oauth2-proxy/oauth2-proxy:latest
            - oauth2-proxy

        install:
            # - "true"
            - UV_PROJECT_ENVIRONMENT=$READTHEDOCS_VIRTUALENV_PATH uv sync --all-extras --group docs

        post_install:
            # Comando para instalar o oauth2-proxy
            - echo "Iniciando a instalação do Go oauth2-proxy"
            #- go install github.com/oauth2-proxy/oauth2-proxy/v7@latest
            - echo "Instalação do Go concluída. O binário está em $GOPATH/bin"

            # Verifique se o binário está disponível para depuração
            #- which oauth2-proxy

            # Install dependencies
            #- poetry install --with docs
            # https://github.com/readthedocs/readthedocs.org/issues/4912#issuecomment-1992286540
            # - VIRTUAL_ENV=$READTHEDOCS_VIRTUALENV_PATH poetry install --with docs
            #- echo ${TJSP_MNI_USERNAME}

            # https://github.com/astral-sh/uv/issues/10074
            #- pip install uv
            #- UV_PROJECT_ENVIRONMENT=$READTHEDOCS_VIRTUALENV_PATH uv sync --all-extras --group docs --link-mode=copy
            - echo $UV_PROJECT_ENVIRONMENT

        build:
            html:
                - echo "Building HTML"

                # 1. Adicione a pasta 'bin' ao PATH
                - export PATH=$READTHEDOCS_VIRTUALENV_PATH/bin:$PATH
                #- export PATH=$READTHEDOCS_VIRTUALENV_PATH:$PATH

                #- mkdir -p $READTHEDOCS_OUTPUT/html/
                #- echo "Hello world!" > $READTHEDOCS_OUTPUT/html/index.html
                # 2. Executar o Build do MkDocs (obrigatório se você quer gerar a documentação)
                # Usamos 'uv run' porque as dependências MkDocs estão instaladas com o uv!
                - uv run mkdocs build --config-file mkdocs.yml

                # 3. Mover/Copiar a saída para o local correto
                # O RTD espera que os arquivos HTML estejam em $READTHEDOCS_OUTPUT/html/
                - mkdir -p $READTHEDOCS_OUTPUT/html/

                # Assumindo que o MkDocs gerou para a pasta 'site'
                - cp -r site/* $READTHEDOCS_OUTPUT/html/

                # 1. ATIVAR o ambiente Go (CRUCIAL!)
                # Define $GOPATH/bin no PATH para comandos Go funcionarem corretamente.
                # O Read the Docs cria o $GOPATH em /home/docs/go
                #- echo $GOPATH
                #- echo $GOROOT
                #- cd /usr/local/go && ls -la
                #- go version
                #- export PATH=$PATH:/home/docs/go/bin

                # 2. Iniciar o serviço (usando o binário que agora está no PATH)
                # O comando agora pode chamar 'oauth2-proxy' diretamente.
                - ./oauth2-proxy --provider github \
                  --upstream file:///$READTHEDOCS_OUTPUT/html/#/ \
                  --authenticated-emails-file /site_config/email_list.txt \
                  --cookie-expire=0h0m30s \
                  --skip-provider-button=true

                - OAUTH_PROXY_PID=$!
                - echo "OAuth2 Proxy iniciado com PID $OAUTH_PROXY_PID"

                # dddd
                #- $GOPATH/bin/oauth2-proxy --provider github --upstream file:///app/#/ --authenticated-emails-file /site_config/email_list.txt --cookie-expire=0h0m30s --skip-provider-button=true

        #     pdf:
        #         - echo "Building PDF"
        #         - mkdir -p $READTHEDOCS_OUTPUT/pdf/
        #         - echo "Hello world!" > $READTHEDOCS_OUTPUT/pdf/index.pdf
        #     epub:
        #         - echo "Building ePub"
        #         - mkdir -p $READTHEDOCS_OUTPUT/epub/
        #         - echo "Hello world!" > $READTHEDOCS_OUTPUT/epub/index.epub
        post_build:
            - echo "Command run at 'post_build' step"
            #- echo `date`

# Build documentation with Mkdocs
mkdocs:
    configuration: mkdocs.yml
# # Optionally, but recommended,
# # declare the Python requirements required to build your documentation
# # See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html
# python:
#    install:
#    - requirements: docs/requirements.txt
